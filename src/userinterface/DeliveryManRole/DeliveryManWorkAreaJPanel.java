/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private DeliveryMan dm;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DeliveryMan dm, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.dm = dm;
        this.business = business;
        populateTable();
    }
    
    public void populateTable(){
        System.out.println(this.dm);
        //this.userAccount.getWorkQueue().getWorkRequestList()
       if(this.dm.getWorkQueue().getWorkRequestList() != null)
        {
            DefaultTableModel dtm = (DefaultTableModel) deliverOrderTable.getModel();
            dtm.setRowCount(0);
            for (WorkRequest w : this.dm.getWorkQueue().getWorkRequestList()) 
            {
                if(w.getOrder() != null)
                {
                    Object row[] = new Object[6];
                    row[0] = w.getOrder().getOrderId();
                    row[1] = w.getSender().getUsername();
                     row[2] = w.getReceiver().getCustomer().getName();
                   
//                    if(w.getSender().getCustomer() == null)
//                    {
//                       row[3] = this.restaurant.getName();
//                    }
//                    else
//                    {
//                        row[3] = w.getSender().getCustomer().getName(); 
//                    }
                    row[3] = w.getReceiver().getCustomer().getCustomerAddress();
                    row[4] = w.getOrder().getComment();
                    row[5] = w.getStatus();
                    dtm.addRow(row);
                }
  
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        deliverOrderTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnAssign = new javax.swing.JButton();
        btnDeliver = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(32, 47, 90));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        deliverOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Sender", "Receiver Name", "Receiver Address", "Message", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deliverOrderTable);
        if (deliverOrderTable.getColumnModel().getColumnCount() > 0) {
            deliverOrderTable.getColumnModel().getColumn(0).setResizable(false);
            deliverOrderTable.getColumnModel().getColumn(1).setResizable(false);
            deliverOrderTable.getColumnModel().getColumn(2).setResizable(false);
            deliverOrderTable.getColumnModel().getColumn(3).setResizable(false);
            deliverOrderTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 440, 96));

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Delivery Man - Page View");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(315, 315, 315)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(512, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 0, 1250, -1));

        btnAssign.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAssign.setText("My delivery order");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });
        add(btnAssign, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 180, 30));

        btnDeliver.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeliver.setText("Order Delivered");
        btnDeliver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliverActionPerformed(evt);
            }
        });
        add(btnDeliver, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 260, -1, -1));

        refreshJButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, -1, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed

        int selectedRow = deliverOrderTable.getSelectedRow();
        
        if(selectedRow >= 0)
        {
            String orderId= (String)deliverOrderTable.getValueAt(selectedRow, 0);
            for(WorkRequest wr: this.dm.getWorkQueue().getWorkRequestList())
            {
                if(wr.getOrder().getOrderId().equals(orderId))
                {
                    wr.setStatus("Out for Delivery");
                    JOptionPane.showMessageDialog(null, "The order is out for delivery;.");
                    this.populateTable();
                    break;
                }
            }

        }
                
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnDeliverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliverActionPerformed
        
        int selectedRow = deliverOrderTable.getSelectedRow();
        
        if(selectedRow >= 0)
        {
            String orderId= (String)deliverOrderTable.getValueAt(selectedRow, 0);
            for(WorkRequest wr: this.dm.getWorkQueue().getWorkRequestList())
            {
                if(wr.getOrder().getOrderId().equals(orderId))
                {
                    wr.setStatus("Delivered");
                    JOptionPane.showMessageDialog(null, "The order is delivered.");
                    this.populateTable();
                    break;
                }
            }

        }
        
    }//GEN-LAST:event_btnDeliverActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnDeliver;
    private javax.swing.JTable deliverOrderTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration//GEN-END:variables
}
